# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.admin_email: 'laddiya@gamil.com'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\ExceptionListener:
        tags: 
            - {name: kernel.event_listener, event: kernel.exception}

# # config/services.yaml
# imports:
#     - { resource: 'legacy_config.php' }

#     # glob expressions are also supported to load multiple files
#     - { resource: '/etc/myapp/*.yaml' }

#     # ignore_errors: not_found silently discards errors if the loaded file doesn't exist
#     - { resource: 'my_config_file.xml', ignore_errors: not_found }
#     # ignore_errors: true silently discards all errors (including invalid code and not found)
#     - { resource: 'my_other_config_file.xml', ignore_errors: true }
